#!/bin/bash
# (c) 2013 Samium Gromoff <_deepfire@feelingofgreen.ru>
# Licensed under the terms of the GNU GPL License version 3 and higher

# set -e

CTX_STORE=.git/weld-context
CTX_CMDLINE="$@"
if test -f ${CTX_STORE}; then
    CTX_STORED_CMDLINE="($(grep CTX_CMDLINE ${CTX_STORE}))"
fi

usage() {
    cat <<EOF
  Usage:
    $0 OPTIONS* TO-COMMIT [FROM-COMMIT]

  "Welds" FROM-COMMIT into TO-COMMIT, then rebases the current branch
  (unless another is specified) atop the new commit.

  When COMMIT is not specified, it is interpreted
  as the tip of HEAD.

  When COMMIT equals to a special value "tree", a new commit is made,
  using 'git add --all', atop HEAD, which is then used as a value
  for the parameter.

   Modes of   Elementary actions:
  operation:
              cherry weld amend REBASE_BASE   command line

    weld         +     +    +      TO+1                                          <to> <from>
    weldit       -     -    +      TO+1    --no-cherry --no-weld --edit          <to>
    weldname     -     -    +      TO+1    --reauthor <nickname>                 <to>
    weldui       -     -    +      TO+X    --no-cherry --no-weld --manual-amend  <to>
    weldmove     +     -    -      TO+1    --no-weld --no-amend                  <to> <from>
    weldrop      -     -    -      TO^1    --drop-commit                         <to>

  Options:

    --branch BRANCH    Use a branch different from HEAD
    --edit[-message]   Allow editing of the amended commit message
    --manual-amend     Run git-gui for amending.  Conflicts with --no-amend
    --no-move          Do not move to TO
    --no-cherry[pick]  Do not cherry-pick FROM-COMMIT
    --no-weld          Do not weld FROM-COMMIT onto TO-COMMIT
    --no-amend         Do not amend TO-COMMIT.  Conflicts with --edit-message
    --no-mutate        History rewrite mode only, do not change any commits
                         Shortcut for --no-{move,cherry,weld,amend}
    --reauthor[-commit] NICKNAME
                       Change author of TO-COMMIT to NICKNAME.
    --drop[-commit]    Drop TO-COMMIT.  Implies --no-mutate
    --no-restore       When either a cherry-pick, or a rebase fails, do not
                         disturb the state of failure with recovery operations
    --debug-vars       Print internal variables
    --debug-keep       Keep the temporary branches
    --continue         Restore weld session from ${CTX_STORE} ${CTX_STORED_CMDLINE}

EOF
}

do_exit() {
    local exit_status=$1

    if test ${exit_status} = 0
    then
        echo "; weld: success"
    else
        echo "; weld: FAILED"
    fi

    exit ${exit_status}
}

CONTINUE=

GIT_AMEND_NO_EDIT_MESSAGE="--no-edit"
GIT_AMEND_AUTHOR=""

ORIG_HEAD="$(git symbolic-ref HEAD | sed s%refs/heads/%%)"
BRANCH="${ORIG_HEAD}"

while test -z "${opt_done}"
do
    case "$1"
        in
        --no-restore )                        NO_RESTORE=t;;
        --edit | --edit-message )             GIT_AMEND_NO_EDIT_MESSAGE="";;
        --no-move )                           NO_MOVE=t;;
        --no-cherry | --no-cherrypick )       NO_CHERRY=t;;
        --no-weld )                           NO_WELD=t;;
        --no-amend )                          NO_AMEND=t;;
        --manual-amend )                      MANUAL_AMEND=t;;
        --debug-vars )                        DEBUG_VARS=t;;
        --debug-keep )                        DEBUG_KEEP=t;;
	--continue )                          CONTINUE=t;;
        --branch )
            BRANCH="$2"
            git show-ref --quiet --verify refs/heads/${BRANCH} || {
	        echo "ERROR: not a local branch: $2"
	        exit 1
            }
            shift
            ;;
        --no-mutate )
            NO_MOVE=t
            NO_CHERRY=t
            NO_WELD=t
            NO_AMEND=t
            ;;
        --reauthor | --reauthor-commit )
            REAUTHOR_COMMIT=t
            NO_CHERRY=t
            NO_WELD=t
            full_id="$(author-id $2)"
            if test -z "${full_id}"
            then
	        echo "ERROR: unknown author id: $2"
	        exit 1
            else
                echo "; resolved author id <$2> to ${full_id}"
            fi
            shift
            GIT_AMEND_AUTHOR="--author \"${full_id}\""
            ;;
        --drop | --drop-commit )
            DROP_COMMIT=t
            NO_MOVE=t
            NO_CHERRY=t
            NO_WELD=t
            NO_AMEND=t
            ;;
        "--"* )
            echo "ERROR: unknown option: $1"
            exit 1
            ;;
        * )
            break
            ;;
    esac
    shift
done

TO="$1"

test -z "${TO}" && {
    usage
    exit 1
}

if test "$2" = "tree"
then
    git add --all
    git commit -m "working tree at ${ORIG_HEAD}"
    FROM="$(git show-ref --verify refs/heads/${ORIG_HEAD} | cut -d' ' -f1)"
    echo "; weld: saved working tree as commit ${FROM}"
    git reset --hard HEAD^1
    REAPPLY_FROM_ON_ERROR=t
else
    FROM="${2:-${BRANCH}}"
    if test -z "$2${NO_WELD}"
    then
        echo "; weld: FROM assumed to be tip of branch ${BRANCH}"
    fi
fi

if test ! -z "${DROP_COMMIT}"
then
    REBASE_BASE=${TO}^1
else
    REBASE_BASE=${TO}
fi

REBASE_BASE_BRANCH="rebase-weld-${RANDOM}"
BACKUP_BRANCH="backup-weld-${RANDOM}"

###
### Context
###
CTX_VARS="BRANCH TO FROM ORIG_HEAD REBASE_BASE NO_MOVE NO_CHERRY NO_WELD NO_AMEND REAUTHOR_COMMIT DROP_COMMIT MANUAL_AMEND GIT_AMEND_NO_EDIT_MESSAGE GIT_AMEND_AUTHOR NO_RESTORE REAPPLY_FROM_ON_ERROR REBASE_BASE_BRANCH BACKUP_BRANCH CTX_CMDLINE"

if test x${CONTINUE} != x
then
    echo "; restoring context from ${CTX_STORE}"
    source ${CTX_STORE}
else
    rm -f ${CTX_STORE}
    for var in ${CTX_VARS}
    do
        eval "echo \"${var}=\\\"\${$var}\\\"\"" >> ${CTX_STORE}
    done
fi

###
### All state variables go above.
###
if test ! -z "${DEBUG_VARS}"
then
    echo "; weld: internal state:"
    for var in ${CTX_VARS}
    do
        eval "echo \"    $var: \${$var}\""
    done
fi

###
### Phase 0: Sanity check -- see if working tree is clean
###
if git status --porcelain 2>&1 | grep "^??" > /dev/null
then
    echo "FATAL: unstaged changes in working tree -- safe operation impossible."
    exit 1
fi

###
### Phase 1: Mutate -- cherry-pick, amend
###
git branch ${REBASE_BASE_BRANCH} ${REBASE_BASE}
if test -z "${NO_MOVE}"
then
    git checkout ${REBASE_BASE_BRANCH}
fi
## Sub-phase 1: Cherrypick -- updates REBASE_BASE_BRANCH
if test -z "${NO_CHERRY}"
then
    echo "; weld: now at ${REBASE_BASE_BRANCH}/${REBASE_BASE}"
    echo "; weld: git cherry-pick ${FROM}"
    if !          git cherry-pick ${FROM}
    then
        echo "ERROR: failed to cherry-pick ${FROM}"
        if test -z "${NO_RESTORE}"
        then
            git cherry-pick --abort
            git checkout ${ORIG_HEAD}
            if test -z "${DEBUG_KEEP}"
            then
                git branch -D ${REBASE_BASE_BRANCH}
            fi
            if test ! -z "${REAPPLY_FROM_ON_ERROR}"
            then
                git cherry-pick --no-commit ${FROM}
            fi
        fi
        do_exit 1
    fi
fi
## Sub-phase 2: Reset+Add -- updates index
if test -z "${NO_WELD}"
then
    echo "; weld: git reset --mixed ${TO}"
    git reset --mixed ${TO}
    git add --all
fi
## Sub-phase 3: Amend+Commit -- updates REBASE_BASE_BRANCH
if test -z "${NO_AMEND}"
then
    if test ! -z "${MANUAL_AMEND}"
    then
        git gui
    else
        eval git commit --amend ${GIT_AMEND_NO_EDIT_MESSAGE} ${GIT_AMEND_AUTHOR}
    fi
fi

###
### Phase 2: Rebase
###
## Save pristine ${BRANCH}
git branch ${BACKUP_BRANCH} ${BRANCH}

STATUS=0
echo "; weld: git rebase --onto ${REBASE_BASE_BRANCH} ${TO} ${BRANCH}"
if            git rebase --onto ${REBASE_BASE_BRANCH} ${TO} ${BRANCH}
then
    ## Safety check:
    git diff --exit-code ${BACKUP_BRANCH} ${BRANCH} || {
        while true
        do
            echo "WARNING: rebase produced differences.  What to do:"
            echo -e "\n   [r]eview/[a]ccept or [any-key] to abort:"
            echo -ne "\n  Your choice: "
            read choice
            case "${choice}" in
                r )
                    git diff --exit-code ${BACKUP_BRANCH} ${BRANCH} | less;;
                a )
                    break;;
                * )
                    STATUS=1
                    break;;
            esac
        done
        if test "${STATUS}" = 1
        then
            ## Abort the rebase:
            git reset --hard
            git checkout ${BRANCH}
            git reset --hard ${BACKUP_BRANCH}
            git checkout ${ORIG_HEAD}
        fi
    }
elif test ! -z "${NO_RESTORE}"
then
    echo "WARNING: rebase failed.  --no-restore specified -- proceed manually."
    STATUS=1
else
    echo "ERROR: rebase failed.  Undoing changes.."
    git rebase --abort
    git checkout ${ORIG_HEAD}
    STATUS=1
fi

###
### Phase 3: Cleanup
###
if test -z "${DEBUG_KEEP}"
then
    git branch -D ${BACKUP_BRANCH}
    git branch -D ${REBASE_BASE_BRANCH}
fi

do_exit ${STATUS}
